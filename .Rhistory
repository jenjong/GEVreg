s  = old_theta[2]
k  = old_theta[3]
grad = apply(cbind(eval(Jaco),eval(Jaco)[,1]*z),2,mean, na.rm = T)
grad
lambda
x=Y; z=Z; theta0=true_theta;beta0=rep(0,p); expr=expr_reg; alpha=0.5; maxiter=100; method = 'B-spline' ; lambda = 100
x=Y; z=Z; theta0=true_theta;beta0=rep(0,p); expr=expr_reg; alpha=0.5; maxiter=100; method = 'B-spline' ; lambda = 1
n = length(x)
old_theta <- c(theta0,beta0)
#if (method == 'B-spline' ) old_theta[1] = 0
new_theta <- old_theta
niter <- 0
Jaco <- expr$Jaco
Hmat <- expr$Hmat
niter = niter + 1
mu = c(old_theta[1]+z%*%old_theta[-(1:3)])
s  = old_theta[2]
k  = old_theta[3]
grad = apply(cbind(eval(Jaco),eval(Jaco)[,1]*z),2,mean, na.rm = T)
grad = apply(cbind(eval(Jaco),eval(Jaco)[,1]*z),2,mean, na.rm = T)
if (method == 'B-spline' )
{
grad[-(1:3)] = grad[-(1:3)] + lambda*Om%*%old_theta[-(1:3)]*n
grad = grad[-1]
}
grad
grad = apply(cbind(eval(Jaco),eval(Jaco)[,1]*z),2,mean, na.rm = T)
if (method == 'B-spline' )
{
grad[-(1:3)] = grad[-(1:3)] + lambda*Om%*%old_theta[-(1:3)]*n
grad = grad[-1]
}
if (max(abs(grad))<1e-07){
break
}
hess = GEVhessian(x,z,mu,s,k)
hess = hess + diag(1e-8, ncol(hess))
if (method == 'B-spline' )
{
hess[-(1:3),-(1:3)] = hess[-(1:3),-(1:3)] + lambda*Om*n
hess = hess[-1,-1]
new_theta[-1] = old_theta[-1] - alpha*solve(hess)%*%grad
}
new_theta
niter = niter + 1
mu = c(old_theta[1]+z%*%old_theta[-(1:3)])
s  = old_theta[2]
k  = old_theta[3]
grad = apply(cbind(eval(Jaco),eval(Jaco)[,1]*z),2,mean, na.rm = T)
if (method == 'B-spline' )
{
grad[-(1:3)] = grad[-(1:3)] + lambda*Om%*%old_theta[-(1:3)]*n
grad = grad[-1]
}
if (max(abs(grad))<1e-07){
break
}
hess = GEVhessian(x,z,mu,s,k)
hess = hess + diag(1e-8, ncol(hess))
if (method == 'B-spline' )
{
hess[-(1:3),-(1:3)] = hess[-(1:3),-(1:3)] + lambda*Om*n
hess = hess[-1,-1]
new_theta[-1] = old_theta[-1] - alpha*solve(hess)%*%grad
}
if (method == 'linear' )
{
new_theta = old_theta - alpha*solve(hess)%*%grad
}
old_theta = new_theta
old_theta
n = length(x)
old_theta <- c(theta0,beta0)
#if (method == 'B-spline' ) old_theta[1] = 0
new_theta <- old_theta
niter <- 0
Jaco <- expr$Jaco
Hmat <- expr$Hmat
# if the spline is used, the intercept is not updated for identifiability
for (i in 1:maxiter)
{
niter = niter + 1
mu = c(old_theta[1]+z%*%old_theta[-(1:3)])
s  = old_theta[2]
k  = old_theta[3]
grad = apply(cbind(eval(Jaco),eval(Jaco)[,1]*z),2,mean, na.rm = T)
if (method == 'B-spline' )
{
grad[-(1:3)] = grad[-(1:3)] + lambda*Om%*%old_theta[-(1:3)]*n
grad = grad[-1]
}
if (max(abs(grad))<1e-07){
break
}
hess = GEVhessian(x,z,mu,s,k)
hess = hess + diag(1e-8, ncol(hess))
if (method == 'B-spline' )
{
hess[-(1:3),-(1:3)] = hess[-(1:3),-(1:3)] + lambda*Om*n
hess = hess[-1,-1]
new_theta[-1] = old_theta[-1] - alpha*solve(hess)%*%grad
}
if (method == 'linear' )
{
new_theta = old_theta - alpha*solve(hess)%*%grad
}
old_theta = new_theta
}
new_theta
GEV_regfull <- function (x, z, theta0, beta0, expr=expr_reg,
method = c('linear', 'B-spline'),
Om = NULL, lambda = 0,
alpha=1, maxiter = 1000, tol = 1e-05) {
n = length(x)
old_theta <- c(theta0,beta0)
#if (method == 'B-spline' ) old_theta[1] = 0
new_theta <- old_theta
niter <- 0
Jaco <- expr$Jaco
Hmat <- expr$Hmat
# if the spline is used, the intercept is not updated for identifiability
for (i in 1:maxiter)
{
niter = niter + 1
mu = c(old_theta[1]+z%*%old_theta[-(1:3)])
s  = old_theta[2]
k  = old_theta[3]
grad = apply(cbind(eval(Jaco),eval(Jaco)[,1]*z),2,mean, na.rm = T)
if (method == 'B-spline' )
{
grad[-(1:3)] = grad[-(1:3)] + lambda*Om%*%old_theta[-(1:3)]*n
grad = grad[-1]
}
if (max(abs(grad))<1e-07){
break
}
hess = GEVhessian(x,z,mu,s,k)
hess = hess + diag(1e-8, ncol(hess))
if (method == 'B-spline' )
{
hess[-(1:3),-(1:3)] = hess[-(1:3),-(1:3)] + lambda*Om*n
hess = hess[-1,-1]
new_theta[-1] = old_theta[-1] - alpha*solve(hess)%*%grad
}
if (method == 'linear' )
{
new_theta = old_theta - alpha*solve(hess)%*%grad
}
old_theta = new_theta
}
return(list(initial = theta0, root = c(old_theta), step = niter,
hess = hess))
}
result_newton <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
result_newton
m = result_lm[1] + Z%*%est_beta1
m
a = result_lm[2]
k = result_lm[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
v
lambda_vec = seq(0, 10, length  = 50)
set.seed(s)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
eps1 = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
tY = true_beta + eps1
# est_beta1 = solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y
# Y_tilda1 <- Y - Z %*% est_beta1
# est_theta1 <- fgev(Y_tilda1)$estimate
# result_lm <- c(est_theta1,est_beta1)
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
result_newton <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = result_lm[1] + Z%*%est_beta1
a = result_lm[2]
k = result_lm[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(v)
plot(v)
result_newton
m = result_newton[1] + Z%*%result_newton[-(1:3)]
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(v)
v
lambda_vec
lambda_vec = seq(0, 1, length  = 50)
set.seed(s)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
eps1 = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
tY = true_beta + eps1
# est_beta1 = solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y
# Y_tilda1 <- Y - Z %*% est_beta1
# est_theta1 <- fgev(Y_tilda1)$estimate
# result_lm <- c(est_theta1,est_beta1)
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(v)
v
lambda
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
m
plot(v)
plot(m)
lambda_vec
lambda = 0
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
plot(m)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
eps1 = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
tY = true_beta + eps1
# est_beta1 = solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y
# Y_tilda1 <- Y - Z %*% est_beta1
# est_theta1 <- fgev(Y_tilda1)$estimate
# result_lm <- c(est_theta1,est_beta1)
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(m)
plot(v)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
eps1 = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
tY = true_beta + eps1
# est_beta1 = solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y
# Y_tilda1 <- Y - Z %*% est_beta1
# est_theta1 <- fgev(Y_tilda1)$estimate
# result_lm <- c(est_theta1,est_beta1)
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(m)
plot(v)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
eps1 = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
tY = true_beta + eps1
# est_beta1 = solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y
# Y_tilda1 <- Y - Z %*% est_beta1
# est_theta1 <- fgev(Y_tilda1)$estimate
# result_lm <- c(est_theta1,est_beta1)
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(m)
plot(v)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
eps1 = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
tY = true_beta + eps1
# est_beta1 = solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y
# Y_tilda1 <- Y - Z %*% est_beta1
# est_theta1 <- fgev(Y_tilda1)$estimate
# result_lm <- c(est_theta1,est_beta1)
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(m)
plot(v)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
eps1 = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
tY = true_beta + eps1
# est_beta1 = solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y
# Y_tilda1 <- Y - Z %*% est_beta1
# est_theta1 <- fgev(Y_tilda1)$estimate
# result_lm <- c(est_theta1,est_beta1)
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(m)
plot(v)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
eps1 = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
tY = true_beta + eps1
# est_beta1 = solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y
# Y_tilda1 <- Y - Z %*% est_beta1
# est_theta1 <- fgev(Y_tilda1)$estimate
# result_lm <- c(est_theta1,est_beta1)
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(m)
plot(v)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
eps1 = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
tY = true_beta + eps1
# est_beta1 = solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y
# Y_tilda1 <- Y - Z %*% est_beta1
# est_theta1 <- fgev(Y_tilda1)$estimate
# result_lm <- c(est_theta1,est_beta1)
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(m)
plot(v)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
eps1 = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
tY = true_beta + eps1
# est_beta1 = solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y
# Y_tilda1 <- Y - Z %*% est_beta1
# est_theta1 <- fgev(Y_tilda1)$estimate
# result_lm <- c(est_theta1,est_beta1)
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(m)
plot(v)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
eps1 = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
tY = true_beta + eps1
# est_beta1 = solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y
# Y_tilda1 <- Y - Z %*% est_beta1
# est_theta1 <- fgev(Y_tilda1)$estimate
# result_lm <- c(est_theta1,est_beta1)
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(m)
plot(v)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
eps1 = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
tY = true_beta + eps1
# est_beta1 = solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y
# Y_tilda1 <- Y - Z %*% est_beta1
# est_theta1 <- fgev(Y_tilda1)$estimate
# result_lm <- c(est_theta1,est_beta1)
v = rep(0,length(lambda_vec))
for (j in 1:length(lambda_vec))
{
lambda = lambda_vec[j]
fit <- try(GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.5, maxiter=100)$root, silent = T)
m = fit[1] + Z%*%fit[-(1:3)]
a = fit[2]
k = fit[3]
v[j] =  sum(dgev(tY,m,a,k, log = T))
}
plot(m)
plot(v)
