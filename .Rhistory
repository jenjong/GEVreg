?body
f <- function(x) x^5
f
quote(5^x)
body(f) <- quote(5^x)
g
f
e <- expression(y <- x^2, return(y))
e
body(f) <- as.call(c(as.name("{"), e))
f
fgev
fgev.norm
?parse
txt <- "
x <- 1
an error
"
txt <- "
x <- 1
an error
"
sf <- srcfile("txt")
sf
try(parse(text = txt, srcfile = sf))
dgev
lgev = function (x, loc = 0, scale = 1, shape = 0)
{
if (min(scale) <= 0)
return( - 1e+6)
if (length(shape) != 1)
stop("invalid shape")
x <- (x - loc)/scale
if (shape == 0)
d <- log(1/scale) - x - exp(-x)
else {
nn <- length(x)
xx <- 1 + shape * x
xxpos <- xx[xx > 0 | is.na(xx)]
scale <- rep(scale, length.out = nn)[xx > 0 | is.na(xx)]
d <- numeric(nn)
d[xx > 0 | is.na(xx)] <- log(1/scale) - xxpos^(-1/shape) -
(1/shape + 1) * log(xxpos)
d[xx <= 0 & !is.na(xx)] <- -(1e+6)
}
return(d)
}
lgev(100,20,0.1)
lgev(x, 100,20,0.1)
z
l2gev = function (tvec, lambda)
{
loc.vec = zz%*%tvec[1:(p+1)]
v = sum(lgev(x, loc = tvec[1:(p+1)], scale = tvec[p+2], shape = tvec[p+3]))
return(v)
}
set.seed(1)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
z = matrix(rnorm(n*p), n, p)
x = z%*%true_beta + eps
fgev(x = drop(Y), nsloc = as.data.frame(Z))$estimate)
fgev(x = drop(Y), nsloc = as.data.frame(Z))$estimate
lgev(x, 100,20,0.1)
lgev(x, 100,1,0.1)
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
zz
z
zz = cbind(1,z)
tvec = c(0,p+3)
start
tvec[p+2] = start$scale
zz
tvec[1:(p+1)]
p
tvec = rep(0,p+3)
tvec[1] = start$loc
tvec[p+2] = start$scale
tvec[1:(p+1)]
zz%*%tvec[1:(p+1)]
loc.vec = zz%*%tvec[1:(p+1)]
tvec[p+2]
v = sum(lgev(x, loc = loc.vec, scale = tvec[p+2], shape = tvec[p+3])) +
lambda*sum(tvec[2:(p+1)]^2)
lambda = 1
loc.vec = zz%*%tvec[1:(p+1)]
v = sum(lgev(x, loc = loc.vec, scale = tvec[p+2], shape = tvec[p+3])) +
lambda*sum(tvec[2:(p+1)]^2)
v
?optim
tvec
optim(tvec, l2gev, lambda = 1)
l2gev = function (tvec, lambda)
{
loc.vec = zz%*%tvec[1:(p+1)]
v = sum(lgev(x, loc = loc.vec, scale = tvec[p+2], shape = tvec[p+3])) -
lambda*sum(tvec[2:(p+1)]^2)
return(- v)
}
optim(tvec, l2gev, lambda = 1)
tvec
optim(tvec, l2gev, lambda = 10)
optim(tvec, l2gev, lambda = 20)
optim(tvec, l2gev, lambda = 0)
fgev(x = drop(Y), nsloc = as.data.frame(Z))$estimate
optim(tvec, l2gev, lambda = 0, method = "BFGS")
fgev(x = drop(Y), nsloc = as.data.frame(Z))$estimate
optim(tvec, l2gev, lambda = 2, method = "BFGS")
gc()
rm(list=ls())
gc()
library(evd)
n = 100
true_theta=c(100,30,0.1)
p= 100
true_beta = rep(0,p)
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
set.seed(1)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
z = matrix(rnorm(n*p), n, p)
x = z%*%true_beta + eps
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
lgev = function (x, loc = 0, scale = 1, shape = 0)
{
if (min(scale) <= 0)
return( - 1e+6)
if (length(shape) != 1)
stop("invalid shape")
x <- (x - loc)/scale
if (shape == 0)
d <- log(1/scale) - x - exp(-x)
else {
nn <- length(x)
xx <- 1 + shape * x
xxpos <- xx[xx > 0 | is.na(xx)]
scale <- rep(scale, length.out = nn)[xx > 0 | is.na(xx)]
d <- numeric(nn)
d[xx > 0 | is.na(xx)] <- log(1/scale) - xxpos^(-1/shape) -
(1/shape + 1) * log(xxpos)
d[xx <= 0 & !is.na(xx)] <- -(1e+6)
}
return(d)
}
zz = cbind(1,z)
tvec = rep(0,p+3)
tvec[1] = start$loc
tvec[p+2] = start$scale
lambda = 1
l2gev = function (tvec, lambda)
{
loc.vec = zz%*%tvec[1:(p+1)]
v = sum(lgev(x, loc = loc.vec, scale = tvec[p+2], shape = tvec[p+3])) -
lambda*sum(tvec[2:(p+1)]^2)
return(- v)
}
optim(tvec, l2gev, lambda = 20, method = "BFGS")
optim(tvec, l2gev, lambda = 1, method = "BFGS")
rm(list=ls())
gc()
library(evd)
n = 100
true_theta=c(100,30,0.1)
p= 2
true_beta = rep(0,p)
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
set.seed(1)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
z = matrix(rnorm(n*p), n, p)
x = z%*%true_beta + eps
fgev(x = drop(Y), nsloc = as.data.frame(Z))$estimate
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
lgev = function (x, loc = 0, scale = 1, shape = 0)
{
if (min(scale) <= 0)
return( - 1e+6)
if (length(shape) != 1)
stop("invalid shape")
x <- (x - loc)/scale
if (shape == 0)
d <- log(1/scale) - x - exp(-x)
else {
nn <- length(x)
xx <- 1 + shape * x
xxpos <- xx[xx > 0 | is.na(xx)]
scale <- rep(scale, length.out = nn)[xx > 0 | is.na(xx)]
d <- numeric(nn)
d[xx > 0 | is.na(xx)] <- log(1/scale) - xxpos^(-1/shape) -
(1/shape + 1) * log(xxpos)
d[xx <= 0 & !is.na(xx)] <- -(1e+6)
}
return(d)
}
zz = cbind(1,z)
tvec = rep(0,p+3)
tvec[1] = start$loc
tvec[p+2] = start$scale
lambda = 1
l2gev = function (tvec, lambda)
{
loc.vec = zz%*%tvec[1:(p+1)]
v = sum(lgev(x, loc = loc.vec, scale = tvec[p+2], shape = tvec[p+3])) -
lambda*sum(tvec[2:(p+1)]^2)
return(- v)
}
optim(tvec, l2gev, lambda = 1, method = "BFGS")
fgev(x = drop(Y), nsloc = as.data.frame(Z))$estimate
fgev(x = x, nsloc = as.data.frame(Z))$estimate
fgev(x = x, nsloc = as.data.frame(z))$estimate
optim(tvec, l2gev, lambda = 1, method = "BFGS")
optim(tvec, l2gev, lambda = 1, method = "BFGS")$par
fgev(x = x, nsloc = as.data.frame(z))$estimate
optim(tvec, l2gev, lambda = 0, method = "BFGS")$par
fgev(x = x, nsloc = as.data.frame(z))$estimate
rm(list=ls())
gc()
library(evd)
n = 100
true_theta=c(100,30,0.1)
p= 2
true_beta = rep(0,p)
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
## function
lgev = function (x, loc = 0, scale = 1, shape = 0)
{
if (min(scale) <= 0)
return( - 1e+6)
if (length(shape) != 1)
stop("invalid shape")
x <- (x - loc)/scale
if (shape == 0)
d <- log(1/scale) - x - exp(-x)
else {
nn <- length(x)
xx <- 1 + shape * x
xxpos <- xx[xx > 0 | is.na(xx)]
scale <- rep(scale, length.out = nn)[xx > 0 | is.na(xx)]
d <- numeric(nn)
d[xx > 0 | is.na(xx)] <- log(1/scale) - xxpos^(-1/shape) -
(1/shape + 1) * log(xxpos)
d[xx <= 0 & !is.na(xx)] <- -(1e+6)
}
return(d)
}
l2gev = function (tvec, lambda)
{
loc.vec = zz%*%tvec[1:(p+1)]
v = sum(lgev(x, loc = loc.vec, scale = tvec[p+2], shape = tvec[p+3])) -
lambda*sum(tvec[2:(p+1)]^2)
return(- v)
}
### simulation
start <- list()
start$scale <- sqrt(6 * var(x))/pi
rm(list=ls())
gc()
library(evd)
n = 100
true_theta=c(100,30,0.1)
p= 2
true_beta = rep(0,p)
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
## function
lgev = function (x, loc = 0, scale = 1, shape = 0)
{
if (min(scale) <= 0)
return( - 1e+6)
if (length(shape) != 1)
stop("invalid shape")
x <- (x - loc)/scale
if (shape == 0)
d <- log(1/scale) - x - exp(-x)
else {
nn <- length(x)
xx <- 1 + shape * x
xxpos <- xx[xx > 0 | is.na(xx)]
scale <- rep(scale, length.out = nn)[xx > 0 | is.na(xx)]
d <- numeric(nn)
d[xx > 0 | is.na(xx)] <- log(1/scale) - xxpos^(-1/shape) -
(1/shape + 1) * log(xxpos)
d[xx <= 0 & !is.na(xx)] <- -(1e+6)
}
return(d)
}
l2gev = function (tvec, lambda)
{
loc.vec = zz%*%tvec[1:(p+1)]
v = sum(lgev(x, loc = loc.vec, scale = tvec[p+2], shape = tvec[p+3])) -
lambda*sum(tvec[2:(p+1)]^2)
return(- v)
}
gevreg = function(x, z, lambda = 0)
{
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
p = ncol(z)
zz = cbind(1,z)
tvec = rep(0,p+3)
tvec[1] = start$loc
tvec[p+2] = start$scale
optim(tvec, l2gev, lambda = 0, method = "BFGS")$par
}
gevreg = function(x, z, lambda = 0)
{
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
p = ncol(z)
zz = cbind(1,z)
tvec = rep(0,p+3)
tvec[1] = start$loc
tvec[p+2] = start$scale
return( optim(tvec, l2gev, lambda , method = "BFGS")$par )
}
set.seed(1)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
z = matrix(rnorm(n*p), n, p)
x = z%*%true_beta + eps
gevreg(x,z, lambda = 0)
gevreg = function(x, z, lambda = 0)
{
l2gev = function (tvec, lambda)
{
loc.vec = zz%*%tvec[1:(p+1)]
v = sum(lgev(x, loc = loc.vec, scale = tvec[p+2], shape = tvec[p+3])) -
lambda*sum(tvec[2:(p+1)]^2)
return(- v)
}
lgev = function (x, loc = 0, scale = 1, shape = 0)
{
if (min(scale) <= 0)
return( - 1e+6)
if (length(shape) != 1)
stop("invalid shape")
x <- (x - loc)/scale
if (shape == 0)
d <- log(1/scale) - x - exp(-x)
else {
nn <- length(x)
xx <- 1 + shape * x
xxpos <- xx[xx > 0 | is.na(xx)]
scale <- rep(scale, length.out = nn)[xx > 0 | is.na(xx)]
d <- numeric(nn)
d[xx > 0 | is.na(xx)] <- log(1/scale) - xxpos^(-1/shape) -
(1/shape + 1) * log(xxpos)
d[xx <= 0 & !is.na(xx)] <- -(1e+6)
}
return(d)
}
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
p = ncol(z)
zz = cbind(1,z)
tvec = rep(0,p+3)
tvec[1] = start$loc
tvec[p+2] = start$scale
return( optim(tvec, l2gev, lambda , method = "BFGS")$par )
}
gevreg(x,z, lambda = 0)
gevreg = function(x, z, lambda = 0)
{
l2gev = function (tvec, lambda)
{
loc.vec = zz%*%tvec[1:(p+1)]
v = sum(lgev(x, loc = loc.vec, scale = tvec[p+2], shape = tvec[p+3])) -
lambda*sum(tvec[2:(p+1)]^2)
return(- v)
}
lgev = function (x, loc = 0, scale = 1, shape = 0)
{
if (min(scale) <= 0)
return( - 1e+6)
if (length(shape) != 1)
stop("invalid shape")
x <- (x - loc)/scale
if (shape == 0)
d <- log(1/scale) - x - exp(-x)
else {
nn <- length(x)
xx <- 1 + shape * x
xxpos <- xx[xx > 0 | is.na(xx)]
scale <- rep(scale, length.out = nn)[xx > 0 | is.na(xx)]
d <- numeric(nn)
d[xx > 0 | is.na(xx)] <- log(1/scale) - xxpos^(-1/shape) -
(1/shape + 1) * log(xxpos)
d[xx <= 0 & !is.na(xx)] <- -(1e+6)
}
return(d)
}
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
p = ncol(z)
zz = cbind(1,z)
tvec = rep(0,p+3)
tvec[1] = start$loc
tvec[p+2] = start$scale
return( optim(tvec, l2gev, lambda = lambda  , method = "BFGS")$par )
}
gevreg(x,z, lambda = 0)
optim(tvec, l2gev, lambda = 0, method = "BFGS")$par
fgev(x = x, nsloc = as.data.frame(z))$estimate
gevreg(x,z, lambda = 0)
fgev(x = x, nsloc = as.data.frame(z))$estimate
# ridge
gevreg(x,z, lambda = 0)
#
fgev(x = x, nsloc = as.data.frame(z))$estimate
n = 100
true_theta=c(100,30,0.1)
p= 1
true_beta = rep(0,p)
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
set.seed(1)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
z = matrix(rnorm(n*p), n, p)
x = z%*%true_beta + eps
# ridge
gevreg(x,z, lambda = 0)
# function in gev package
fgev(x = x, nsloc = as.data.frame(z))$estimate
l2gev = function (tvec, lambda)
{
loc.vec = zz%*%tvec[1:(p+1)]
# loglikelihood
v1 = - sum(lgev(x, loc = loc.vec, scale = tvec[p+2], shape = tvec[p+3]))
# regularization
v2 = lambda*sum(tvec[2:(p+1)]^2)
v = v1 + v2
return(v)
}
rm(list=ls())
gc()
library(evd)
## function
gevreg = function(x, z, lambda = 0)
{
l2gev = function (tvec, lambda)
{
loc.vec = zz%*%tvec[1:(p+1)]
# loglikelihood
v1 = - sum(lgev(x, loc = loc.vec, scale = tvec[p+2], shape = tvec[p+3]))
# regularization
v2 = lambda*sum(tvec[2:(p+1)]^2)
v = v1 + v2
return(v)
}
lgev = function (x, loc = 0, scale = 1, shape = 0)
{
if (min(scale) <= 0)
return( - 1e+6)
if (length(shape) != 1)
stop("invalid shape")
x <- (x - loc)/scale
if (shape == 0)
d <- log(1/scale) - x - exp(-x)
else {
nn <- length(x)
xx <- 1 + shape * x
xxpos <- xx[xx > 0 | is.na(xx)]
scale <- rep(scale, length.out = nn)[xx > 0 | is.na(xx)]
d <- numeric(nn)
d[xx > 0 | is.na(xx)] <- log(1/scale) - xxpos^(-1/shape) -
(1/shape + 1) * log(xxpos)
d[xx <= 0 & !is.na(xx)] <- -(1e+6)
}
return(d)
}
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
p = ncol(z)
zz = cbind(1,z)
tvec = rep(0,p+3)
tvec[1] = start$loc
tvec[p+2] = start$scale
return( optim(tvec, l2gev, lambda = lambda  , method = "BFGS")$par )
}
### simulation
n = 100
true_theta=c(100,30,0.1)
p= 1
true_beta = rep(0,p)
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
set.seed(1)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
z = matrix(rnorm(n*p), n, p)
x = z%*%true_beta + eps
# ridge
gevreg(x,z, lambda = 0)
# function in gev package
fgev(x = x, nsloc = as.data.frame(z))$estimate
